AWSTemplateFormatVersion: '2010-09-09'
Description: This stack creates ECS cluster with hazelcast server
Parameters:
  Environment:
    Type: String
    Description: Environment Name (DEV)
    AllowedValues: [ 'DEV' ]
  Platform:
    Type: String
    Default: 'HAZELCAST'
    Description: Platform Name
  VpcStackName:
    Type: String
    Description: Name of the stack which is used to create VPC and Subnets
Resources:
  # Load balancer security group
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: HZ-LOAD-BALANCER-SG
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: Allow HTTP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: '::/0'
          Description: Allow HTTP
  # Container security group
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: HZ-CONTAINER-SG
      GroupDescription: Access to the HZ container
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
  # Allow traffic from load balancer into container
  ContainerSecurityGroupIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public Load balancer
      GroupId: !Ref 'ContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8081
      SourceSecurityGroupId: !Ref 'LoadBalancerSG'
  # Allow traffic from one container into another, so that welcome service can reach message service using service discovery DNS URL
  ContainerSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'ContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref 'ContainerSecurityGroup'
  ContainerSecurityGroupIngressFromSelfHz:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group on hz port
      GroupId: !Ref 'ContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 5701
      ToPort: 5701
      SourceSecurityGroupId: !Ref 'ContainerSecurityGroup'

  # Application load balancer for getting traffic to containers
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: HZ-APP-ALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PublicSubnetOne' ] ]
        - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PublicSubnetTwo' ] ]
      SecurityGroups: [ !Ref 'LoadBalancerSG' ]
  # This target group is used to set up the ALB to just drop traffic initially, before any real service target groups have been added
  AppLoadBalancerDummyTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: APP-DUMMY-TG
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
  AppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - AppLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'AppLoadBalancerDummyTG'
          Type: 'forward'
      LoadBalancerArn: !Ref 'AppLoadBalancer'
      Port: 80
      Protocol: HTTP
  # When HZ server container comes up, it will register in this target group
  HzServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: HZ-SERVER-TG
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /actuator/health
      HealthCheckPort: 8081
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Port: 8080
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
  HzServerLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'HzServerTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [ '*' ]
      ListenerArn: !Ref AppLoadBalancerListener
      Priority: 3
  # When HZ client container comes up, it will register in this target group
  HzClientTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: HZ-CLIENT-TG
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /actuator/health
      HealthCheckPort: 8081
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Port: 8080
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
  HzClientLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'HzClientTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [ '/api/v1/hz/client/**' ]
      ListenerArn: !Ref AppLoadBalancerListener
      Priority: 1
  # When HZ management center container comes up, it will register in this target group
  HzMgmtTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: HZ-MGMT-TG
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /hazelcast-mancenter/health
      HealthCheckPort: 8081
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Port: 8080
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
  HzMgmtLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'HzMgmtTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [ '/hazelcast-mancenter/**' ]
      ListenerArn: !Ref AppLoadBalancerListener
      Priority: 2

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HZ-ECS-TASK-EXEC-ROLE
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # IAM role to give the service's containers if the code within needs to access other AWS resources
  # like ECS tasks, S3 buckets etc
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HZ-ECS-TASK-ROLE
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: ECSServiceDiscovery
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow ECS container to access ECS tasks
                  - 'ecs:ListTasks'
                  - 'ecs:DescribeTasks'
                Resource: '*'

  # HZ Discovery POC ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: HZ-DISCOVERY-ECS-CLUSTER

  # Private namespace for services
  HzPrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: hz-discovery
      Vpc:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]

  # Service discovery for message service, DnsConfig property specifies the DNS records that are automatically created
  # in Amazon Route 53 when your Amazon ECS task is registered with the service discovery service
  HzMgmtDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for the HZ management center service
      Name: hz-mgmt-service
      NamespaceId: !Ref HzPrivateNamespace
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
      HealthCheckCustomConfig:
        FailureThreshold: 1
  # Cloud watch log group to which HZ server container send logs
  HzMgmtLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ECS/hz-mgmt'
      RetentionInDays: 7
  # Metadata description of what message container to run and what resource requirements it has
  HzMgmtTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: HZ-MGMT-TD
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: HZ-MGMT-CONTAINER
          Cpu: 512
          Memory: 1024
          Image: 'hazelcast/management-center:4.2020.12'
          PortMappings:
            - ContainerPort: 8080
            - ContainerPort: 8081
          Environment:
            - Name: MC_CONTEXT_PATH
              Value: /hazelcast-mancenter
            - Name: JAVA_OPTS
              Value: -Dhazelcast.mc.healthCheck.enable=true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref HzMgmtLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
  # Service is a resource which allows running multiple copies of a type of task, and gather their logs and metrics,
  # as well as monitor the number of running tasks and replace any that have crashed
  HzMgmtECSService:
    Type: AWS::ECS::Service
    DependsOn: HzMgmtLoadBalancerRule
    Properties:
      ServiceName: HZ-MGMT-SERVICE
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetOne' ] ]
            - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetTwo' ] ]
      TaskDefinition: !Ref HzMgmtTaskDefinition
      LoadBalancers:
        - ContainerName: HZ-MGMT-CONTAINER
          ContainerPort: 8080
          TargetGroupArn: !Ref HzMgmtTargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt HzMgmtDiscoveryService.Arn

  # Cloud watch log group to which HZ server container send logs
  HzServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ECS/hz-server'
      RetentionInDays: 7
  # Metadata description of what message container to run and what resource requirements it has
  HzServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: HZ-SERVER-TD
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: HZ-SERVER-CONTAINER
          Cpu: 512
          Memory: 1024
          Image: 'asakchris/aws-hazelcast-hazelcast-server:4.0'
          PortMappings:
            - ContainerPort: 8080
            - ContainerPort: 8081
            - ContainerPort: 5701
          Environment:
            - Name: JAVA_OPTS
              Value: -Dspring.profiles.active=aws
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref HzServerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
  # Service is a resource which allows running multiple copies of a type of task, and gather their logs and metrics,
  # as well as monitor the number of running tasks and replace any that have crashed
  HzServerECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - HzServerLoadBalancerRule
      - HzMgmtECSService
    Properties:
      ServiceName: HZ-SERVER-SERVICE
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetOne' ] ]
            - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetTwo' ] ]
      TaskDefinition: !Ref HzServerTaskDefinition
      LoadBalancers:
        - ContainerName: HZ-SERVER-CONTAINER
          ContainerPort: 8080
          TargetGroupArn: !Ref HzServerTargetGroup

  # Cloud watch log group to which HZ client container send logs
  HzClientLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ECS/hz-client'
      RetentionInDays: 7
  # Metadata description of what message container to run and what resource requirements it has
  HzClientTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: HZ-CLIENT-TD
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: HZ-CLIENT-CONTAINER
          Cpu: 512
          Memory: 1024
          Image: 'asakchris/aws-hazelcast-hazelcast-client:4.0'
          PortMappings:
            - ContainerPort: 8080
            - ContainerPort: 8081
          Environment:
            - Name: JAVA_OPTS
              Value: -Dspring.profiles.active=aws -Dlogging.level.com.hazelcast=DEBUG
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref HzClientLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
  # Service is a resource which allows running multiple copies of a type of task, and gather their logs and metrics,
  # as well as monitor the number of running tasks and replace any that have crashed
  HzClientECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - HzClientLoadBalancerRule
      - HzServerECSService
    Properties:
      ServiceName: HZ-CLIENT-SERVICE
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetOne' ] ]
            - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetTwo' ] ]
      TaskDefinition: !Ref HzClientTaskDefinition
      LoadBalancers:
        - ContainerName: HZ-CLIENT-CONTAINER
          ContainerPort: 8080
          TargetGroupArn: !Ref HzClientTargetGroup
